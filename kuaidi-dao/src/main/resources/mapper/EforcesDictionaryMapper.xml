<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kuaidi.dao.EforcesDictionaryMapper">
  <resultMap id="BaseResultMap" type="org.kuaidi.bean.domain.EforcesDictionary">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="parent" jdbcType="INTEGER" property="parent" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="usergroup" jdbcType="VARCHAR" property="usergroup" />
    <result column="sort" jdbcType="INTEGER" property="sort" />
  </resultMap>
  <sql id="Base_Column_List">
    id, parent, name, usergroup, sort
  </sql>

  <!-- 查询数据字典信息 -->
  <select id="getlist" parameterType="org.kuaidi.bean.domain.EforcesDictionary" resultMap="BaseResultMap">
    select * from eforces_dictionary where isDelete = 0
    <if test="name!=null">
      and  name like concat('%',#{name},'%')
    </if>
    <if test="parent != null">
      and parent = #{parent,jdbcType=INTEGER}
    </if>
  </select>

  <!-- 删除 -->
  <update id="removeUpdate">
    update
    eforces_dictionary
    set
    isDelete=1
    where
    id
    in
    <foreach collection="array" item="id"
             index="index" open="(" close=")" separator="," >
      #{id}
    </foreach>
  </update>

  <!-- 获取所属父级别 -->
  <select id="getParent" resultMap="BaseResultMap">
    	select * from eforces_dictionary where isDelete = 0 and parent = 0
  </select>
  
  <!-- 根据父节点查询子节点 -->
  <select id="getByParentId" parameterType ="java.lang.Integer" resultMap="BaseResultMap">
    select * from eforces_dictionary where isDelete = 0
    and parent = ${parentId}
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from eforces_dictionary
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from eforces_dictionary
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.kuaidi.bean.domain.EforcesDictionary">
    insert into eforces_dictionary (id, parent, name, 
      usergroup, sort)
    values (#{id,jdbcType=INTEGER}, #{parent,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, 
      #{usergroup,jdbcType=VARCHAR}, #{sort,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="org.kuaidi.bean.domain.EforcesDictionary">
    insert into eforces_dictionary
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="parent != null">
        parent,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="usergroup != null">
        usergroup,
      </if>
      <if test="sort != null">
        sort,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="parent != null">
        #{parent,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="usergroup != null">
        #{usergroup,jdbcType=VARCHAR},
      </if>
      <if test="sort != null">
        #{sort,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.kuaidi.bean.domain.EforcesDictionary">
    update eforces_dictionary
    <set>
      <if test="parent != null">
        parent = #{parent,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="usergroup != null">
        usergroup = #{usergroup,jdbcType=VARCHAR},
      </if>
      <if test="sort != null">
        sort = #{sort,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.kuaidi.bean.domain.EforcesDictionary">
    update eforces_dictionary
    set parent = #{parent,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      usergroup = #{usergroup,jdbcType=VARCHAR},
      sort = #{sort,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>